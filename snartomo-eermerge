#!/bin/bash

###############################################################################
# SNARTomoEERMerge
#
# Changelog:
#   2023-09-07 (trs) -- created
#
###############################################################################

function program_info() {
  if [[ "${verbose}" -ge 1 ]]; then
    echo 
    echo "Running: SNARTomoEERMerge"
    echo "Modified 2023-10-13"
    date
    echo 
  fi
}

#################### Filenames and Parameters ####################

shared_libs=snartomo-shared.bash  # Shared libraries
frame_file=motioncor-frame.txt    # Frames file
grouping=''                       # Number of EER frames to merge
max_mic_dose=50                   # Maximum electron dose (e/A2) above which a warning will be printed
verbosity=4                       # Verbosity level (Max: 6)
progress_verbosity=2              # Verbosity level for progress bar
tifdir=EERMerge                   # Output top-level directory
log_file=log-eermerge.txt         # Log file
cmd_file=commands.txt             # Output commands file (in ${tifdir})

################ END BATCH HEADER ################

# Outline (multiline comment)
: '
main
  check_env
  parse_command_line
  shared.check_vars
  validateEers
  shared.check_exe
  shared.check_dir
  shared.check_mc2_frame
  shared.validateDose
  shared.createTempLocal
  shared.check_frames
    shared.copy_local
  relion.convert_to_tiff
  shared.validateTiff
    shared.getDimensions
  shared.remove_local
  shared.clean_local_dir
'

function main() {
###############################################################################
#   Passed arguments:
#     ${@} : command-line arguments
#   
###############################################################################
  
  # BASH arrays can't be returned, so declare them here
  declare -A original_vars
  declare -a var_sequence
  declare -A vars
  
  check_env
  parse_command_line "${@}"
  program_info
  
  check_args 0  # make sure of no unfamiliar arguments
  check_vars
  
  if [[ "${vars[testing]}" == true ]] || [[ "${vars[log]}" == "" ]] || [[ "${verbose}" -eq 0 ]]; then
    if [[ "${verbose}" -ge 1 ]]; then
      echo "Not writing log file"
    fi
    
    do_real_work "${@}"
  else
    if [[ "${verbose}" -ge 1 ]]; then
      echo "Writing to log file: ${vars[log]}"
      do_real_work "${@}" | tee -a "${vars[log]}"
    fi
  fi
  
  clean_local_dir "temp_local"
  
  # Write command line to output directory
  if [[ "${vars[testing]}" == false ]] ; then
    echo -e "$0 ${@}\n" >> "${vars[tifdir]}/${cmd_file}"
  fi
  
  # If log file exists in output directory, append to it, else move it
  moveLogFile
  
  vprint "Done!\n" "1+"
}

function do_real_work() {
###############################################################################
#   Function:
#     Does the "real" work
#   
#   Passed arguments:
#     ${@} : command-line arguments
###############################################################################

  vprint "Validating..." "1+"
  validated=true
  
  validateEers
  check_file "${vars[frame_file]}" "MotionCor2 frame file"
  check_exe "$(which relion_convert_to_tiff)" "RELION executable"
  check_dir "${vars[imod_dir]}" "IMOD executables directory"
  check_mc2_frame
  
  validateDose
  createTempLocal

  # Validation summary
  if [[ "$validated" == false ]]; then
    vprint "Missing required inputs, exiting...\n" "0+"
    exit 4
  else
    vprint "Found required inputs. Continuing...\n" "1+"
    vprint "Looping through ${#eer_array[@]} EERs..." "1+"
  fi
  
  # Loop through EERs
# # #   for fn in ${eer_array[@]} ; do
  for eer_idx in ${!eer_array[@]} ; do
    fn="${eer_array[$eer_idx]}"
    
    if [[ "${vars[testing]}" == false ]] ; then
      check_frames "${vars[log]}"  # copies the EER files locally if necessary
      # NOTE: Updates $fn if copying locally
      
      # If using the progress bar, then only direct output to the log file
      if [[ "${verbose}" -ge 2 ]] && [[ "${verbose}" -le 3 ]] ; then
        compressEer "$num_sections" "${vars[log]}"  
      
      # If not using the progress bar, then screen output will be written to the screen and the log file
      else
        compressEer "$num_sections"
      fi
      
      # Remove locally-copied movie file (make sure it's in the temp directory and not the original)
      remove_local "$fn"
      
      if [[ "${verbose}" -eq "${progress_verbosity}" ]] ; then
        progressBar $((${eer_idx}+1)) ${#eer_array[@]}
      elif [[ "${verbose}" -ge 4 ]]; then
        echo
      fi
    
    # Testing
    else
      if [[ "${verbose}" -ge 3 ]]; then
        local merge_cmd="relion_convert_to_tiff --i $fn --eer_grouping ${vars[grouping]} --o ${vars[tifdir]}"
        echo "  TESTING: $merge_cmd"
      elif [[ "${verbose}" -eq "${progress_verbosity}" ]] ; then
        progressBar $((${eer_idx}+1)) ${#eer_array[@]}
        sleep ${vars[delay]}
      fi
    fi
    # End testing IF-THEN
  done
  # End EER loop
  
  # If input is in a subdirectory (e.g., A/B/file.eer), then the output directory will have also contained that subdirectory (OutDir/A/B/file.tif)
  local eer_dir=$(dirname $fn)
  if [[ "${eer_dir}" != "." ]] && [[ "${vars[testing]}" == false ]] ; then
    rmdir -p $(dirname ${out_tiff}) 2> /dev/null
  fi
  
  if [[ "${verbose}" -ge 2 ]] && [[ "${verbose}" -le 3 ]] ; then
    echo
  fi
}

function check_env() {
###############################################################################
#   Functions:
#     Checks whether environmental variable SNARTOMO_DIR is set
#     Sources shared functions from central SNARTomo directory
#     
#   Global variables:
#     do_pace
#     shared_libs
#     
###############################################################################

  if [[ "${SNARTOMO_DIR}" == "" ]]; then
    echo -e "\nERROR!! Environmental variable 'SNARTOMO_DIR' undefined!"
    echo      "  Set variable with: export SNARTOMO_DIR=<path_to_snartomo_files>"
    echo -e   "  Exiting...\n"
    exit
  else
    source "${SNARTOMO_DIR}/${shared_libs}"
    source "${SNARTOMO_DIR}/argumentparser_dynamic.sh"
  fi
}

function parse_command_line() {
###############################################################################
#   Function:
#     Parses command line
#   
#   Passed arguments:
#     ${@} : command-line arguments
#   
#   Global variables:
#     original_vars : non-associative array, before cleaning
#     var_sequence : associative array, maintaining the order of the variables
#     vars : final options array
#   
###############################################################################
  
  add_section "REQUIRED SETTINGS" "These settings must be supplied for each run."
  add_argument "eers" "" "EER files (more than one -> must be enclosed in quotes)" "ANY"
  add_argument "grouping" "${grouping}" "Number of EER frames to merge" "INT"
  add_argument "frame_file" "${frame_file}" "Input MotionCor2 frame file" "ANY"
  
  add_section "OTHER SETTINGS" "These settings have default settings that can be overridden."
  add_argument "tifdir" "${tifdir}" "Output directory" "ANY"
  add_argument "verbosity" "${verbosity}" "Verbosity level (0..6)" "INT"
  add_argument "progress" "false" "Flag show progress bar (equivalent to '--verbosity=2')" "BOOL"
  add_argument "log" "${log_file}" "Output log file (not used in testing mode)" "ANY"
  add_argument "max_mic_dose" "${max_mic_dose}" "Maximum electron dose (e/A2) above which a warning will be printed" "FLOAT"
  add_argument "min_frames" "${SNARTOMO_MINFRAMES}" "Minimum number of frames before printing warning" "INT"
  add_argument "max_frames" "${SNARTOMO_MAXFRAMES}" "Maximum number of frames before printing warning" "INT"
  add_argument "eer_local" "${CP_EER_LOCAL}" "Flag to copy EER files locally temporarily" "BOOL"
  add_argument "eer_latency" "${SNARTOMO_EER_WAIT}" "Maximum header read time (seconds) before micrograph is copied locally" "FLOAT"
  add_argument "temp_local" "${SNARTOMO_LOCAL}" "Directory to copy EER files locally" "ANY"
  add_argument "imod_dir" "${IMOD_BIN}" "IMOD executable directory" "ANY"
  add_argument "testing" "false" "Testing flag" "BOOL"
  add_argument "delay" "0.0" "Delay between files during testing (seconds)" "FLOAT"
  add_argument "debug" "false" "Flag for debugging" "BOOL"

  dynamic_parser "${@}"
#   print_vars
#   printf "'%s'\n" "${ARGS[@]}" ; exit

  if [[ "${vars[progress]}" == true ]] ; then
    # If you used a non-default verbosity, then print a warning
    if [[ "${vars[verbosity]}" != "${verbosity}" ]] ; then
      echo -e "\n  WARNING! Flag '--progress' overrides 'verbosity flag'"
      echo -e   "    Using '--verbosity=${progress_verbosity}'...\n"
    fi
    
    vars[verbosity]="${progress_verbosity}"
  fi
  
  verbose="${vars[verbosity]}"
}

function print_usage() {
  echo "USAGE : $(basename $0) <eer_files> <options>"
  echo
  echo "To list options & defaults, type:"
  echo "  $(basename $0) --help"
}

function validateEers() {
###############################################################################
#   Function:
#     Check number of input EERs
#   
#   Calls functions:
#     vprint
#     shared.check_exe
#   
#   Global variables:
#     validated
#     ARGS
#     eer_array (OUTPUT)
#   
###############################################################################
  
# # #   IFS=' ' read -a eer_array <<< "${ARGS[@]}"
  mapfile -t eer_array < <(ls -tr ${vars[eers]})
# # #   printf "213 '%s'\n" "${eer_array[@]}"

  if [[ "${#eer_array[@]}" -eq 0 ]] ; then
    echo -e "  ERROR!! Need at least one file as input!"
    validated=false
  else
    # If expanded array is a pattern that doesn't exist, then array will be simply that pattern, and not a file
    if ! [[ -e "${eer_array[0]}" ]] ; then
      echo -e "  ERROR!! No files match the pattern '${eer_array[0]}'!"
      validated=false
    else
      vprint "  Found ${#eer_array[@]} input EERs" "1+"
    fi
  fi
}

function progressBar {
###############################################################################
#   Function:
#     Show progress bar
#     Adapted from https://stackoverflow.com/a/28044986
#   
#   Positional variables:
#     1. current index (should start from 1)
#     2. last index
#     
###############################################################################

  local curr_idx=$1
  local end=$2
  
  # Process data
  let _progress=(${curr_idx}*100/${end}*100)/100
  let _done=(${_progress}*6)/10
  let _left=60-$_done
  
  # Build progressbar string lengths
  _fill=$(printf "%${_done}s")
  _empty=$(printf "%${_left}s")

  # Build progressbar strings and print the ProgressBar line
  printf "\rProgress : [${_fill// /#}${_empty// /-}] ${_progress}%%" >&2
}

function moveLogFile() {
###############################################################################
#   Function:
#     If log file exists in output directory, append to it, else move it
#   
#   Positional variables:
#   
#   Calls functions:
#   
#   Global variables:
#     vars
#   
###############################################################################
  
  local temp_log="tmp-log$$.txt"
  
  if [[ -f "${vars[tifdir]}/${vars[log]}" ]]; then
    cat ${vars[log]} ${vars[tifdir]}/${vars[log]} > ${temp_log}
    mv ${temp_log} ${vars[tifdir]}/${vars[log]}
    local status_code=$?
  else
    mv ${vars[log]} ${vars[tifdir]}/${vars[log]}
    local status_code=$?
  fi
  
  if [[ $status_code -ne 0 ]] ; then
    echo "WARNING! Couldn't move log file '${vars[log]}' to output directory '${vars[tifdir]}/' (Maybe it's already open?)"
    \rm ${temp_log} 2> /dev/null
  fi
}

function DUMMY_FUNCTION() {
###############################################################################
#   Function:
#     FUNCTION
#   
#   Positional variables:
#   
#   Calls functions:
#   
#   Global variables:
#   
###############################################################################
  
  return
}

########################################################################################

main "$@"
