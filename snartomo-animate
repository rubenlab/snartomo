#!/bin/bash

###############################################################################
# SNARTomoAnimate
#
# Changelog:
#   2023-08-24 (trs) -- added options for first & last images
#   2023-06-23 (trs) -- created
#
###############################################################################

function program_info() {
  echo 
  echo "Running: SNARTomoAnimate"
  echo "Modified 2024-02-15"
  date
  echo 
}

#################### Filenames and Parameters ####################

shared_libs=snartomo-shared.bash  # Shared libraries
bin_factor=1                      # Downsampling factor
frame_rate=25                     # Frame rate of movie
movie_format=mp4                  # Movie format
verbosity=2                       # Verbosity level (Max: 4)

################ END BATCH HEADER ################

# Outline (multiline comment)
: '
main
  check_env
  parse_command_line
  shared.check_args
  shared.check_dir
  shared.check_exe
  get_axis
    shared.get_shortest_axis
  shared.set_local_dir
  convert_mrc
  clean_local_dir
'

function main() {
###############################################################################
#   Passed arguments:
#     ${@} : command-line arguments
#   
###############################################################################
  
  # BASH arrays can't be returned, so declare them here
  declare -A original_vars
  declare -a var_sequence
  declare -A vars
  
  check_env
  parse_command_line "${@}"
  check_args 1 1
  fn="${ARGS[0]}"
  
  vprint "\nValidating..." "1+"
  validated=true
  check_dir "${vars[imod_dir]}" "IMOD executables directory"
  check_exe "$(which ffmpeg)" "FFMPEG executable"

  # Summary
  if [[ "$validated" == false ]]; then
    vprint "Missing required inputs, exiting...\n" "0+" "${outlog}"
    exit 4
  else
    vprint "Found required inputs. Continuing..." "1+" "${outlog}"
  fi
  
  vprint "" "2+"
  get_axis
  
  # Prevent potential conflicts with full SNARTomo runs
  vars[temp_local]="./Animate-$(basename $SNARTOMO_LOCAL)"
  set_local_dir
  
  movie_convert
  clean_local_dir "temp_local"
  vprint "\nDone!\n" "1+"
}

function check_env() {
###############################################################################
#   Functions:
#     Checks whether environmental variable SNARTOMO_DIR is set
#     Sources shared functions from central SNARTomo directory
#     
#   Calls functions:
#     check_vars
#   
#   Global variables:
#     do_pace
#     shared_libs
#     
###############################################################################

  if [[ "${SNARTOMO_DIR}" == "" ]]; then
    echo -e "\nERROR!! Environmental variable 'SNARTOMO_DIR' undefined!"
    echo      "  Set variable with: export SNARTOMO_DIR=<path_to_snartomo_files>"
    echo -e   "  Exiting...\n"
    exit
  else
    source "${SNARTOMO_DIR}/${shared_libs}"
    source "${SNARTOMO_DIR}/argumentparser_dynamic.sh"

    # If locale uses a comma as a decimal, there will be problems
    LC_NUMERIC="en_US.UTF-8"
  fi
}

function parse_command_line() {
###############################################################################
#   Function:
#     Parses command line
#   
#   Passed arguments:
#     ${@} : command-line arguments
#   
#   Global variables:
#     original_vars : non-associative array, before cleaning
#     var_sequence : associative array, maintaining the order of the variables
#     vars : final options array
#   
###############################################################################
  
  add_argument "bin" "${bin_factor}" "Downsampling factor" "INT"
  add_argument "output" "" "Output filename stem (w/o extension, default->stem of input)" "ANY"
  add_argument "axis" "" "Axis to animate (stack -> 'z')" "ANY"
  add_argument "range" "" "Range of images (single value for central N, quoted & space-delimited for first+last)" "ANY"
  add_argument "options" "" "FFMPEG 'eq' filter options" "ANY"
  add_argument "zigzag" "false" "Flag to play movie back and forth" "BOOL"
  add_argument "fps" "${frame_rate}" "Frames per second" "FLOAT"
  add_argument "bps" "" "Bit rate, bits per second" "ANY"
  add_argument "format" "${movie_format}" "Movie format" "ANY"
  add_argument "verbosity" "${verbosity}" "Verbosity level (0..4)" "INT"
  add_argument "save_imgs" "false" "Flag to save intermediate images" "BOOL"
  add_argument "imod_dir" "${IMOD_BIN}" "IMOD executable directory" "ANY"
  add_argument "temp_local" "${SNARTOMO_LOCAL}" "Directory for temporary files" "ANY"

  dynamic_parser "${@}"
#   print_vars
#   printf "'%s'\n" "${ARGS[@]}" ; exit

  if [[ "${vars[verbosity]}" -ge 2 ]] ; then
    verbose="${vars[verbosity]}"
  fi
}

function print_usage() {
  echo "USAGE : $(basename $0) MRC stack/volume <options>"
  echo
  echo "To list options & defaults, type:"
  echo "  $(basename $0) --help"
}

function get_axis() {
###############################################################################
#   Function:
#     FUNCTION
#   
#   Positional variables:
#   
#   Calls functions:
#     get_shortest_axis
#   
#   Global variables:
#     axis_array (OUTPUT)
#     min_dim
#     min_idx
#     min_axis (OUTPUT)
#   
###############################################################################
  
  axis_array=("x" "y" "z")
  
  if [[ "${vars[axis]}" == "" ]] ; then
    get_shortest_axis
    min_axis="-${axis_array[$min_idx]}"
# #     echo "min_dim '$min_dim', min_idx '$min_idx', min_axis '$min_axis'" ; exit
  else
    min_axis="-${vars[axis]}"
    
    # Need index
    for idx in "${!axis_array[@]}"; do
      if [[ "${axis_array[$idx]}" == "${vars[axis]}" ]]; then
        min_idx=$idx
      fi
    done
  fi
}

function set_local_dir() {
###############################################################################
#   Function:
#     Set local directory if necessary
#   
#   Global variables:
#     vars
#     temp_local_dir (OUTPUT)
#     verbose
#   
###############################################################################
  
  # In case we need to copy EERs locally, remember the PID ($$)
  temp_local_dir="${vars[temp_local]}/$$"
  
  if [[ "$verbose" -ge 2 ]]; then
    mkdir -pv "${temp_local_dir}" 2> /dev/null
  else
    mkdir -p "${temp_local_dir}" 2> /dev/null
  fi
}

function movie_convert() {
###############################################################################
#   Function:
#     Downsample, convert 
#   
#   Positional variables:
#   
#   Calls functions:
#   
#   Global variables:
#     axis_array
#     min_axis
#     min_idx
#     temp_local_dir
#     fn
#     verbose
#     out_crop
#   
###############################################################################
  
  local img_format="jpg"  # for intermediate files
  
  if [[ "${vars[verbosity]}" -ge 1 ]] ; then
    local dimension_string=$(${vars[imod_dir]}/header $fn | grep sections | xargs | rev | cut -d' ' -f1-3 | rev)
    echo -e "\nDimensions of $fn: $dimension_string"
  fi
  
  # Remove shortest axis from axis array
  unset "axis_array[$min_idx]"
  
  # Build command line
  local bin_cmd="${vars[imod_dir]}/binvol ${min_axis} 1"
  
  # add downsampling factor for each axis except along the unstacking axis
  for idx in "${!axis_array[@]}"; do
    bin_cmd+=" -${axis_array[$idx]} ${vars[bin]}"
  done
  
  local out_prefix="${temp_local_dir}/$(echo $(basename $fn) | rev | cut -d'.' -f 2- | rev)"
  local out_bin="${out_prefix}_bin.mrc"
  bin_cmd+=" $fn $out_bin"
  vprint "\nRunning: $bin_cmd" "1+"
  
  if [[ $verbose -ge 3 ]] ; then
    $bin_cmd
  else
    $bin_cmd > /dev/null
  fi
  
  # Rotate volume if shortest (original) dimension is not along z
  if [[ "${min_axis}" != "-z" ]] ; then
    local out_rot="${out_prefix}_rot.mrc"
    local rot_cmd="${vars[imod_dir]}/trimvol -RotateX $out_bin $out_rot"
    vprint "\nRunning: $rot_cmd" "1+"
    
    if [[ $verbose -ge 3 ]] ; then
      $rot_cmd
    else
      $rot_cmd > /dev/null
    fi
    
    \rm $out_bin
  else
    local out_rot="$out_bin"
  fi
  
  # Crop if necessary
  crop_vol "${out_rot}" "${out_prefix}"
  
  if [[ $img_format == "png" ]] ; then
    local format_flag='-p'
  else
    local format_flag='-j'
  fi
  
  local tif_cmd="${vars[imod_dir]}/mrc2tif ${format_flag} $out_crop ${out_prefix}"
  vprint "\nRunning: $tif_cmd" "1+"
  if [[ $verbose -ge 3 ]] ; then
    $tif_cmd
  else
    $tif_cmd > /dev/null
  fi
  
  local new_dimensions=$(${vars[imod_dir]}/header $out_crop | grep sections | xargs | rev | cut -d' ' -f1-3 | rev)
  \rm $out_crop
  
  # Build ffmpeg command
  local movie_cmd="ffmpeg -y -framerate ${vars[fps]} -i ${out_prefix}.%03d.${img_format}"
  
  if [[ "${vars[options]}" != "" ]]; then
    movie_cmd+=" -vf eq=${vars[options]}"
  fi
  
  if [[ "${vars[output]}" == "" ]]; then
    local out_mov="$(basename ${out_prefix}.${vars[format]})"
  else
    local out_mov="${vars[output]}.${vars[format]}"
  fi
  
  # Default bit rate is file size divided by frame rate
  if [[ "${vars[bps]}" == "" ]]; then
    vars[bps]=$(echo $(ls -s $fn | cut -d ' ' -f 1) / ${vars[fps]} | bc)
  fi
  
  movie_cmd+=" -b:v ${vars[bps]}k ${out_mov}"
  vprint "\nRunning: $movie_cmd" "1+"
  
  if [[ $verbose -ge 3 ]] ; then
    $movie_cmd
  else
    $movie_cmd 2> /dev/null
  fi
  
  # If zigzag option (Adapted form https://stackoverflow.com/a/42257863)
  if [[ "${vars[zigzag]}" == "true" ]]; then
    # Move "zig" move to temporary file
    local zig_mov="${temp_local_dir}/zig.${vars[format]}"
    \mv $out_mov ${zig_mov}

    local zigzag_cmd="ffmpeg -y -i $zig_mov -filter_complex '[0:v]reverse,fifo[r];[0:v][r] concat=n=2:v=1 [v]' -map '[v]' -b:v ${vars[bps]}k $out_mov"
    vprint "\nRunning: $zigzag_cmd" "1+"
    
    if [[ $verbose -ge 3 ]] ; then
        eval "$zigzag_cmd"
    else
        eval "$zigzag_cmd" 2> /dev/null
    fi
    
    \rm $zig_mov #2> /dev/null
  fi
  
  if [[ "${vars[verbosity]}" -ge 1 ]] ; then
    local bit_rate=$(ffprobe ${out_mov} 2>&1 | grep Duration | rev | cut -d ' ' -f 1-2 | rev)
    echo -e "\nDimensions of ${out_mov} : $new_dimensions, bit rate $bit_rate\n"
  fi
  
  # Clean up
  if [[ "${vars[save_imgs]}" == false ]] ; then
    \rm ${out_prefix}*.${img_format}
  fi
}

  function crop_vol() {
  ###############################################################################
  #   Function:
  #     Crops volume, if necessary
  #   
  #   Positional variables:
  #     1) Input volume
  #     2) Prefix for output file
  #   
  #   Calls functions:
  #     vprint
  #   
  #   Global variables:
  #     vars
  #     out_crop (OUTPUT)
  #   
  ###############################################################################
    
    local invol=$1
    local out_prefix=$2
    
    # Get range if necessary
    if [[ "${vars[range]}" != "" ]]; then
      local crop_cmd="${vars[imod_dir]}/trimvol"
      out_crop="${out_prefix}_crop.mrc"
      
      # Get number of arguments
      read -a range_array <<< ${vars[range]}
      
      # If 1 value, cut out center
      if [[ "${#range_array[@]}" -eq 1 ]] ; then
        crop_cmd+=" -ZSize ${vars[range]} ${invol} ${out_crop}"
      
      # If 2 values, use as range
      elif [[ "${#range_array[@]}" -eq 2 ]] ; then
        crop_cmd+=" -ZStartAndEnd ${range_array[0]},${range_array[1]} ${invol} ${out_crop}"
      
      # If other number of values, exit on error
      else
        echo -e "\nERROR!! Don't know how to deal with ${#range_array[@]} values in '--range': '${vars[range]}'"
        echo -e   "  Exiting...\n"
        exit
      fi
      
      vprint "\nRunning: $crop_cmd" "1+"
      if [[ $verbose -ge 3 ]] ; then
        $crop_cmd
      else
        $crop_cmd > /dev/null
      fi
      
      \rm $invol
    else
      out_crop=$out_rot
    fi
  }

function DUMMY_FUNCTION() {
###############################################################################
#   Function:
#     FUNCTION
#   
#   Positional variables:
#   
#   Calls functions:
#   
#   Global variables:
#   
###############################################################################
  
  return
}

########################################################################################

main "$@"
