#!/bin/bash
# # set -u  # error if variable undefined

###############################################################################
# Function:
#   Generates MotionCor frames file
#
# Changelog:
#   2024-04-24 (trs) -- if given MDOC file, checks number of frames of all movies unless '--fast' flag given
#   2022-11-28 (trs) -- created
#
###############################################################################

function program_info() {
  echo "Running: SNARTomoFrameCalculator"
  echo "Modified 2024-04-24"
  date
  echo 
}

function print_usage() {
  echo "USAGE:     $(basename $0) <dose_options> <other_options>"
  echo
  echo "To list options & defaults, type:"
  echo "  $(basename $0) --help"
}

#################### Parameters ###################

shared_libs=snartomo-shared.bash  # Shared libraries
frame_file=motioncor-frame.txt          # Frames file
combined_dose=0.15                      # Dose per combined MotionCor frame, electrons per square Angstrom
verbosity=2                             # Verbosity level


################ END BATCH HEADER ################

# Outline (multiline comment)
: '
main
  shared.check_env
  parse_command_line
    argparser.dynamic_parser
  check_img_dose
  check_frm_dose
  build_frames_file
'

function parse_command_line() {
###############################################################################
#   Function:
#     Parses command line
#   
#   Passed arguments:
#     ${@} : command-line arguments
#   
#   Global variables:
#     OPTION_SEP : (from argumentparser_dynamic.sh) hopefully-unique separator for variable fields
#     original_vars : non-associative array, before cleaning
#     var_sequence : associative array, maintaining the order of the variables
#     commandline_args : command-line arguments, may be modified
#     vars : final options array
#     verbose : shortened copy of vars[verbosity]
#   
###############################################################################
  
  add_argument "dose_per_img" "-1" "Dose per image, electrons per square Angstrom" "FLOAT"
  add_argument "dose_per_ts" "-1" "Dose per tilt series, electrons per square Angstrom (requires MDOC file)" "FLOAT"
  add_argument "mdoc_file" "None" "MDOC file, required if dose provided per tilt series or if EER example not provided" "ANY"
  add_argument "num_frames" "-1" "Number of frames per EER movie" "INT"
  add_argument "eer_file" "None" "Example EER file, required if neither MDOC file nor number of frames provided" "ANY"
  add_argument "dose_per_combined" "${combined_dose}" "Dose per combined MotionCor frame, electrons per square Angstrom" "FLOAT"
  add_argument "frame_file" "${frame_file}" "Output MotionCor2 frame file" "ANY"
  add_argument "fast" "false" "If using MDOC, flag to get number of frames from MDOC directly" "BOOL"
  add_argument "eer_dir" "" "EER directory, required if using MDOC, unless '--fast' flag provided" "ANY"
  add_argument "thorough" "false" "If using MDOC, flag to show number of frames in all EERs" "BOOL"
  add_argument "verbosity" "${verbosity}" "Verbosity level (0..3)" "INT"

  dynamic_parser "${@}"
#   print_vars
#   printf "'%s'\n" "${ARGS[@]}" ; exit
  
  verbose="${vars[verbosity]}"
}

function main() {
###############################################################################
#   Passed arguments:
#     ${@} : command-line arguments
#   
###############################################################################
  
  # BASH arrays can't be returned, so declare them here
  declare -A original_vars
  declare -a var_sequence
  declare -A vars
# #   declare -a ARGS
  
  check_env
  parse_command_line "${@}"
# #   print_vars ; exit  # TESTING
  
  if [[ "${verbose}" -ge 2 ]]; then
    program_info
    print_usage
    check_args "0"
  fi
  
  if [[ "${verbose}" -ge 3 ]]; then
    print_arguments
  else
    echo
  fi
  
  vprint "Calculating dose..." "2+"
  check_img_dose
  check_frm_dose
  build_frames_file
}

function check_env() {
###############################################################################
#   Functions:
#     Checks whether environmental variable SNARTOMO_DIR is set
#     Sources shared functions from central SNARTomo directory
#     
###############################################################################

  if [[ "${SNARTOMO_DIR}" == "" ]]; then
    echo -e "\nERROR!! Environmental variable 'SNARTOMO_DIR' undefined!"
    echo      "  Set variable with: export SNARTOMO_DIR=<path_to_snartomo_files>"
    echo -e   "  Exiting...\n"
    exit
  else
    source "${SNARTOMO_DIR}/${shared_libs}"
    source "${SNARTOMO_DIR}/argumentparser_dynamic.sh"

    # If locale uses a comma as a decimal, there will be problems
    LC_NUMERIC="en_US.UTF-8"
  fi
}

function check_img_dose() {
###############################################################################
#   Function:
#     FUNCTION
#   
#   Calls function:
#     vprint
#   
#   Global variables:
#     vars
#   
###############################################################################
  
  if [[ "${vars[dose_per_img]}" == "-1" ]] && [[ "${vars[dose_per_ts]}" == "-1" ]] ; then
    echo -e   "ERROR!! Either dose per image (--dose_per_img) or dose per tilt series (--dose_per_ts) must be specified!"
    echo -e   "  If dose per tilt series is specified, then an MDOC file (--mdoc_file) must be provided.\n"
    exit
  fi
  
  if [[ "${vars[dose_per_ts]}" != "-1" ]] ; then
    # Make sure MDOC exists
    if ! [[ -f "${vars[mdoc_file]}" ]]; then
      echo -e "ERROR!! If dose per tilt series is specified, then an MDOC file (--mdoc_file) must be provided!\n"
      exit
    else
      local ts_mics=$(grep SubFramePath "${vars[mdoc_file]}" | wc -l)
      vars[dose_per_img]=$(bc -l <<< "${vars[dose_per_ts]}"/"${ts_mics}")
      local dose_str=$(printf "%.3f" "${vars[dose_per_img]}")
      vprint "  Dose per image: ${dose_str} electrons per square Angstrom, calculated from ${ts_mics} images in MDOC ${vars[mdoc_file]}" "2+"
    fi
  else
    vprint "  Dose per image: ${vars[dose_per_img]}, provided by user" "2+"
  fi
}

function check_frm_dose() {
###############################################################################
#   Function:
#     Get number of frames
#   
#   Positional variables:
#   
#   Calls functions:
#     check_exe
#     vprint
#   
#   Global variables:
#     vars
#   
###############################################################################
  
  if [[ "${vars[num_frames]}" == "-1" ]] ; then
    if [[ "${vars[eer_file]}" != "None" ]] ; then
      # Make sure file exists
      if ! [[ -f "${vars[eer_file]}" ]]; then
        echo -e "\nERROR!! EER file '${vars[eer_file]}' provided, but does not exist!\n"
        exit
      else
        check_exe "$(which header)" "IMOD header executable"
        local section_line=$(header "${vars[eer_file]}" | grep sections)
        vars[num_frames]=$(echo $section_line | rev | cut -d" " -f1 | rev)
      fi
      
      # If EER file not provided
    else
      # Make sure MDOC file is provided
      if ! [[ -f "${vars[mdoc_file]}" ]]; then
        echo -e "ERROR!! If neither an EER file nor number of frames is provided, then an MDOC file (--mdoc_file) must be provded!\n"
        exit
      else
        if [[ "${vars[fast]}" == true ]]; then
          # Get last entry from MDOC & remove CRLF
          vars[num_frames]=$(grep NumSubFrames "${vars[mdoc_file]}" | sed 's/\r//' | tail -n 1 | cut -d" " -f3)

          # Sanity check -- Some TFS MDOCs shows only 1 frame
          if [[ ${vars[num_frames]} -eq 1 ]] ; then
            echo -e "\nERROR!! MDOC reports only 1 frame!"
            echo    "  Restart without fast mode to check EER header."
            echo -e "  Exiting...\n"
            exit
          fi
        else
          mapfile -t subframe_array < <( grep "SubFramePath" "${vars[mdoc_file]}" | awk '{print $3}' | sed 's/\r//' )
          for subfm_idx in "${!subframe_array[@]}"; do
            # Get path after last backslash
            local movie_base=$(echo ${subframe_array[${subfm_idx}]##*[/\\]} )
            local movie_path="${vars[eer_dir]}/${movie_base}"

            # Make sure EER exists
            if ! [[ -f "${movie_path}" ]]; then
              # Maybe user didn't provide EER directory
              if [[ "${vars[eer_dir]}" == "" ]] ; then
                echo -e "\nERROR!! EER directory (--eer_dir=<PATH>) not provided!"
                echo -e "  Either EER directory or '--fast' flag must be provided."
              else
                echo -e "\nERROR!! Couldn't find EER '${movie_path}'!"
                echo -e "  Either EERs in MDOC '$(basename ${vars[mdoc_file]})' must exist, or '--fast' flag must be provided."
              fi

              echo -e "  Exiting...\n"
              exit

            # Did find EER
            else
              if [[ "${vars[thorough]}" == true ]] && [[ "${subfm_idx}" -eq 0 ]]; then
                vprint "\n  Displaying number of frames for each micrograph" "2+"
                vprint "    # Micrograph" "2+"
              fi

              if [[ "${vars[thorough]}" == true ]] || [[ "${subfm_idx}" -eq 0 ]]; then
                num_frames=$(header "${movie_path}" | grep sections | xargs | rev | cut -d" " -f1 | rev)

                # Remember first value
                if [[ "${subfm_idx}" -eq 0 ]]; then
                  vars[num_frames]=$num_frames

                # Freak out if number varies
                else
                  if [[ "${vars[num_frames]}" != "$num_frames" ]] ; then
                    echo -e "\nERROR!! Variable number of frames in micrographs! (${vars[num_frames]}, $num_frames)"
                    echo -e "  Exiting...\n"
                    exit
                  fi
                fi
                # End first-micrograph IF-THEN
              fi

              if [[ "${vars[thorough]}" == true ]]; then
                vprint "    ${subfm_idx} ${movie_base}: $num_frames" "2+"
              fi
            fi
            # End EER-exists IF-THEN
          done
          # End subframe loop
        fi
        # End fast-mode IF-THEN
      fi
      # End MDOC IF-THEN
      
    fi
    # End EER IF-THEN
  fi
  
  vprint "  Number of frames: ${vars[num_frames]}" "2+"
}

function build_frames_file() {
###############################################################################
#   Function:
#     Write frames file
#   
#   Calls functions:
#     vprint
#   
#   Global variables:
#     vars
#   
###############################################################################
  
  local dose_per_frame=$(bc -l <<< "${vars[dose_per_img]}"/"${vars[num_frames]}")
  local dose_str=$(printf "%8.6f" "${dose_per_frame}")
  local num_frames=$(bc -l <<< "${vars[dose_per_combined]}"/"$dose_per_frame")
  local frames_int=$(printf '%.*f\n' 0 $num_frames)
  local frames_rnd=$(printf '%.*f\n' 3 $num_frames)

  if [[ $frames_int -eq 0 ]] ; then
    echo -e "\nERROR!! Unexpected number of frames to merge! (${vars[dose_per_combined]}/$dose_str=$frames_rnd~=$frames_int)"

    echo -e "  Exiting..."
    exit
  else
    vprint "  Merged frames: $frames_int (${vars[dose_per_combined]}/$dose_str=$frames_rnd)" "2+"
  fi

  local frames_line="${vars[num_frames]} $frames_int $dose_str"
  vprint "\nWriting '$frames_line' to ${vars[frame_file]}\n" "1+"
  echo $frames_line > ${vars[frame_file]}
}

function DUMMY_FUNCTION() {
###############################################################################
#   Function:
#     FUNCTION
#   
#   Positional variables:
#   
#   Calls functions:
#   
#   Global variables:
#   
###############################################################################
  
  return
}

########################################################################################

main "$@"
